generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id       String @id @default(uuid())
  login    String @unique
  password String
}

model Tournament {
  id      String   @id @default(uuid())
  name    String
  format  String // '2x2' или '5x5'
  image   String?
  date    DateTime
  teams   Team[]
  matches Match[]
}

model Team {
  id                    String                  @id @default(uuid())
  name                  String?
  tournamentId          String
  tournament            Tournament              @relation(fields: [tournamentId], references: [id])
  members               PlayerOnTeam[]
  matchesWon            Match[]                 @relation("WinningTeamMatches")
  matchesLost           Match[]                 @relation("LosingTeamMatches")
  PlayerMatchStatistics PlayerMatchStatistics[]
}

model PlayerOnTeam {
  id       String @id @default(uuid())
  player   Player @relation(fields: [playerId], references: [id])
  playerId String
  team     Team   @relation(fields: [teamId], references: [id])
  teamId   String

  @@unique([playerId, teamId])
}

model Player {
  id         String                  @id @default(uuid())
  nickname   String                  @unique
  firstName  String
  lastName   String
  password   String
  teams      PlayerOnTeam[]
  matchStats PlayerMatchStatistics[]
  statistics PlayerStatistics?       @relation("PlayerToStatistics")
}

model PlayerStatistics {
  id         String @id @default(uuid())
  player     Player @relation("PlayerToStatistics", fields: [playerId], references: [id])
  playerId   String @unique
  kills      Int    @default(0)
  deaths     Int    @default(0)
  assists    Int    @default(0)
  win        Int    @default(0)
  lose       Int    @default(0)
  kd         Float  @default(0)
  kda        Float  @default(0)
  mapCount   Int    @default(0)
  svidRating Float  @default(0)
  winrate    Int    @default(0)

  place Int      @default(0)
  mvp   Int      @default(0)
  maps  String[] @default([])
}

model Match {
  id            String                  @id @default(uuid())
  map           String
  tournamentId  String
  tournament    Tournament              @relation(fields: [tournamentId], references: [id])
  winningTeamId String?
  winningTeam   Team?                   @relation("WinningTeamMatches", fields: [winningTeamId], references: [id])
  losingTeamId  String?
  losingTeam    Team?                   @relation("LosingTeamMatches", fields: [losingTeamId], references: [id])
  statistics    PlayerMatchStatistics[]
}

model PlayerMatchStatistics {
  id      String @id @default(uuid())
  match   Match  @relation(fields: [matchId], references: [id])
  matchId String

  player   Player @relation(fields: [playerId], references: [id])
  playerId String

  team   Team   @relation(fields: [teamId], references: [id])
  teamId String

  kills   Int
  deaths  Int
  assists Int
  mvp     Int
  score   Int
}
